{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 print "Intra:" + self.data[3] + " " + self.data[5]\
            self.starting_position = panda.model.servers[self.data[3]].getPos()\
            self.ending_position = panda.model.servers[self.data[5]].getPos()\
            self.node = panda.loader.loadModel("/Users/dklinedi/Pictures/slug2.egg")\
            self.node.reparentTo(panda.model.servers[self.data[3]])\
            self.node.setPos(-2, -2, 1)\
            self.node.setScale(2, 2, 2)\
            self.node.setTransparency(1)\
            if self.data[2] == "SensitiveConnection":\
                self.node.setColor(0.76, 0, 0, 1)\
            tag = ":".join(data[1:5])\
            self.node.setTag('myObjectTag', tag)\
            x, y, z = self.starting_position\
            self.starting_position = self.node.getPos()\
            a, b, c = self.ending_position\
            if a - x == 0:\
                x = x+0.01\
            self.ending_position = (a-x, b-y, c-z)\
            \
            heading = atan((b-y)/(a-x)) * (180 / pi)\
            roll = atan((c-z)/(a-x)) * (180 / pi)\
            if c-z < 0:\
                roll = roll * -1\
            self.node.setH(heading)\
            self.node.setR(roll)\
            self.position1 = self.node.posInterval(30, self.ending_position, startPos=self.starting_position)\
            self.position2 = self.node.posInterval(30, self.starting_position, startPos=self.ending_position)\
            self.pingpong = Sequence(self.position1, self.position2, name=tag)\
            self.pingpong.loop()\
\
\
self.starting_position = panda.model.servers[self.data[3]].getPos()\
            self.node = panda.loader.loadModel("/Users/dklinedi/Pictures/slug2.egg")\
            self.node.reparentTo(panda.model.servers[self.data[3]])\
            self.node.setPos(-2, -2, 1)\
            self.node.setH(90)\
            self.node.setScale(2, 2, 2)\
            self.node.setTransparency(1)\
            self.node.setColorOff()\
            if self.data[2] == "SensitiveConnection":\
                self.node.setColor(0.76, 0, 0, 1)\
            tag = ":".join(data[1:5])\
            self.node.setTag('myObjectTag', tag)\
            self.direction = "Outbound"\
            x, y, z = self.node.getPos()\
            self.start_position = (x, y, z)\
            self.ending_position = (x, y-50, z)\
            panda.lasts[self.starting_position] = (0.0, self)\
            self.position1 = self.node.posInterval(30, self.ending_position, startPos=self.start_position)\
            self.pingpong = Sequence(self.position1, name=tag)\
            self.pingpong.loop()\
\
\
\
\
\
print "Inbound:" + self.data[3] + " " + self.data[5]\
            x, y, z = panda.model.servers[self.data[5]].getPos()\
            self.starting_position = (x, y-30, z)\
            self.node = panda.loader.loadModel("/Users/dklinedi/Pictures/slug2.egg")\
            self.node.reparentTo(panda.model.servers[self.data[5]])\
            self.node.setPos(2, -30, 1)\
            self.node.setH(90)\
            self.node.setScale(2, 2, 2)\
            self.node.setTransparency(1)\
            if self.data[2] == "SensitiveConnection":\
                self.node.setColor(0.76, 0, 0, 1)\
            tag = ":".join(data[1:5])\
            self.node.setTag('myObjectTag', tag)\
            self.direction = "Inbound"\
            x, y, z = self.node.getPos()\
            self.start_position = (x, y, z)\
            self.ending_position = (x, y+30, z)\
            print str(self.start_position) + " " + str(self.ending_position)\
            panda.lasts[self.starting_position] = (0.0, self)\
            self.position1 = self.node.posInterval(30, self.ending_position, startPos=self.start_position)\
            self.pingpong = Sequence(self.position1, name=tag)\
            self.pingpong.loop()\
            panda.lasts[self.starting_position] = (-30.0, self)\
}